@model IsolDesign.WebUI.Models.CreateAssignmentViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", @id = "myForm" })) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Assignment</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Assignment.WorkTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Assignment.WorkTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Assignment.WorkTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Assignment.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Assignment.Type, "Choose Assignment Type", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Assignment.Type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Assignment.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.Assignment.Description, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.TextAreaFor(model => model.Assignment.Description, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Assignment.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Upload Photo of Assignment -->
        <div class="form-group">
            <label class="control-label col-md-2">Assignment Image</label>
            <!-- The name="image" attribute must match the parameter name in the post action-method for model binding to work -->
            <div class="col-md-10">
                <input type="file" data-val="true" data-val-required="Image field is required (Maximum file size 1 MB)" name="photo" class="form-control" />
                @Html.ValidationMessage("photo", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Upload Drawing of Assignment -->
        <div class="form-group">
            <label class="control-label col-md-2">Drawing or Blueprint</label>
            <!-- The name="image" attribute must match the parameter name in the post action-method for model binding to work -->
            <div class="col-md-10">
                <input type="file" data-val="true" data-val-required="Image field is required (Maximum file size 1 MB)" name="drawing" class="form-control" />
                @Html.ValidationMessage("photo", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.Assignment.Photo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Assignment.Photo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Assignment.Photo, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.Assignment.Drawing, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Assignment.Drawing, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Assignment.Drawing, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.Assignment.Video, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Assignment.Video, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Assignment.Video, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
